// -*- C++ -*-
//
// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef SYSTEM_LOG_ODB_HPP
#define SYSTEM_LOG_ODB_HPP

#include <odb/version.hxx>

#if ODB_VERSION != 20500UL
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "system_log.hpp"

#include "user-odb.hpp"

#include <memory>
#include <cstddef>
#include <utility>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/no-op-cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // SystemLog
  //
  template <>
  struct class_traits< ::models::SystemLog >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::models::SystemLog >
  {
    public:
    typedef ::models::SystemLog object_type;
    typedef ::models::SystemLog* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::std::string id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/pgsql/version.hxx>
#include <odb/pgsql/forward.hxx>
#include <odb/pgsql/binding.hxx>
#include <odb/pgsql/pgsql-types.hxx>
#include <odb/pgsql/query.hxx>

namespace odb
{
  // SystemLog
  //
  template <typename A>
  struct query_columns< ::models::SystemLog, id_pgsql, A >
  {
    // id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    id_type_;

    static const id_type_ id;

    // level
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::models::LogLevel,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    level_type_;

    static const level_type_ level;

    // action_type
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::models::ActionType,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    action_type_type_;

    static const action_type_type_ action_type;

    // message
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    message_type_;

    static const message_type_ message;

    // timestamp
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_timestamp >::query_type,
      pgsql::id_timestamp >
    timestamp_type_;

    static const timestamp_type_ timestamp;

    // actor
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::odb::lazy_shared_ptr< ::models::User >,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    actor_type_;

    static const actor_type_ actor;

    // subject
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::odb::lazy_shared_ptr< ::models::User >,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    subject_type_;

    static const subject_type_ subject;

    // ip_address
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::basic_string< char >,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    ip_address_type_;

    static const ip_address_type_ ip_address;

    // user_agent
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::basic_string< char >,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    user_agent_type_;

    static const user_agent_type_ user_agent;
  };

  template <typename A>
  const typename query_columns< ::models::SystemLog, id_pgsql, A >::id_type_
  query_columns< ::models::SystemLog, id_pgsql, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::models::SystemLog, id_pgsql, A >::level_type_
  query_columns< ::models::SystemLog, id_pgsql, A >::
  level (A::table_name, "\"level\"", 0);

  template <typename A>
  const typename query_columns< ::models::SystemLog, id_pgsql, A >::action_type_type_
  query_columns< ::models::SystemLog, id_pgsql, A >::
  action_type (A::table_name, "\"action_type\"", 0);

  template <typename A>
  const typename query_columns< ::models::SystemLog, id_pgsql, A >::message_type_
  query_columns< ::models::SystemLog, id_pgsql, A >::
  message (A::table_name, "\"message\"", 0);

  template <typename A>
  const typename query_columns< ::models::SystemLog, id_pgsql, A >::timestamp_type_
  query_columns< ::models::SystemLog, id_pgsql, A >::
  timestamp (A::table_name, "\"timestamp\"", 0);

  template <typename A>
  const typename query_columns< ::models::SystemLog, id_pgsql, A >::actor_type_
  query_columns< ::models::SystemLog, id_pgsql, A >::
  actor (A::table_name, "\"actor_id\"", 0);

  template <typename A>
  const typename query_columns< ::models::SystemLog, id_pgsql, A >::subject_type_
  query_columns< ::models::SystemLog, id_pgsql, A >::
  subject (A::table_name, "\"subject_id\"", 0);

  template <typename A>
  const typename query_columns< ::models::SystemLog, id_pgsql, A >::ip_address_type_
  query_columns< ::models::SystemLog, id_pgsql, A >::
  ip_address (A::table_name, "\"ip_address\"", 0);

  template <typename A>
  const typename query_columns< ::models::SystemLog, id_pgsql, A >::user_agent_type_
  query_columns< ::models::SystemLog, id_pgsql, A >::
  user_agent (A::table_name, "\"user_agent\"", 0);

  template <typename A>
  struct pointer_query_columns< ::models::SystemLog, id_pgsql, A >:
    query_columns< ::models::SystemLog, id_pgsql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::models::SystemLog, id_pgsql >:
    public access::object_traits< ::models::SystemLog >
  {
    public:
    struct id_image_type
    {
      details::buffer id_value;
      std::size_t id_size;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      details::buffer id_value;
      std::size_t id_size;
      bool id_null;

      // level_
      //
      int level_value;
      bool level_null;

      // action_type_
      //
      int action_type_value;
      bool action_type_null;

      // message_
      //
      details::buffer message_value;
      std::size_t message_size;
      bool message_null;

      // timestamp_
      //
      long long timestamp_value;
      bool timestamp_null;

      // actor_
      //
      details::buffer actor_value;
      std::size_t actor_size;
      bool actor_null;

      // subject_
      //
      details::buffer subject_value;
      std::size_t subject_size;
      bool subject_null;

      // ip_address_
      //
      details::buffer ip_address_value;
      std::size_t ip_address_size;
      bool ip_address_null;

      // user_agent_
      //
      details::buffer user_agent_value;
      std::size_t user_agent_size;
      bool user_agent_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef pgsql::object_statements<object_type> statements_type;

    typedef pgsql::query_base query_base_type;

    static const std::size_t column_count = 9UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static const char persist_statement_name[];
    static const char find_statement_name[];
    static const char update_statement_name[];
    static const char erase_statement_name[];
    static const char query_statement_name[];
    static const char erase_query_statement_name[];

    static const unsigned int persist_statement_types[];
    static const unsigned int find_statement_types[];
    static const unsigned int update_statement_types[];

    static const std::size_t batch = 1UL;

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::models::SystemLog, id_common >:
    public access::object_traits_impl< ::models::SystemLog, id_pgsql >
  {
  };

  // SystemLog
  //
}

#include "system_log-odb.ipp"

#include <odb/post.hxx>

#endif // SYSTEM_LOG_ODB_HPP
