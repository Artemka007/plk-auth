#include <iostream>
#include <memory>
#include <string>
#include <thread>
#include "./db/database.hpp"
#include "./services/user_service.hpp"
#include "./services/auth_service.hpp"
#include "./services/log_service.hpp"
#include "./cli/cli_app.hpp"
#include "./cli/io_handler.hpp"

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
std::shared_ptr<CliApp> create_cli_app() {
    try {
        // 1. –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        auto db = db::Database::create(
            "postgres",  // host
            5432,        // port
            "myapp",     // database
            "postgres",  // user
            "password"   // password
        );
        
        std::cout << "‚úÖ Database connection created successfully!\n";
        
        // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if (!db->test_connection()) {
            std::cout << "‚ùå Database connection test: FAILED\n";
            return nullptr;
        }
        std::cout << "‚úÖ Database connection test: SUCCESS\n";
        
        // 3. –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        std::cout << "üóÉÔ∏è Creating database schema...\n";
        db->create_schema();
        
        // 4. –°–æ–∑–¥–∞–µ–º DAO —Ñ–∞–±—Ä–∏–∫—É –∏ DAO –æ–±—ä–µ–∫—Ç—ã
        auto dao_factory = db::DAOFactory(db);
        auto user_dao = dao_factory.create_user_dao();
        auto log_dao = dao_factory.create_log_dao();
        
        // 5. –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        auto user_service = std::make_shared<services::UserService>(user_dao);
        auto auth_service = std::make_shared<services::AuthService>(user_dao);
        auto log_service = std::make_shared<services::LogService>(log_dao);
        
        // 6. –°–æ–∑–¥–∞–µ–º CLI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        auto io_handler = std::make_shared<IOHandler>();
        
        // 7. –°–æ–∑–¥–∞–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º CliApp
        return std::make_shared<CliApp>(user_service, auth_service, log_service, io_handler);
        
    } catch (const std::exception& e) {
        std::cerr << "‚ùå Error creating CLI app: " << e.what() << "\n";
        return nullptr;
    }
}

int main() {
    std::cout << "üöÄ Starting C++ PostgreSQL CLI Application...\n";
    
    try {
        // –°–æ–∑–¥–∞–µ–º CLI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        auto cli_app = create_cli_app();
        
        if (!cli_app) {
            std::cerr << "‚ùå Failed to initialize CLI application\n";
            return 1;
        }
        
        std::cout << "‚úÖ CLI application initialized successfully!\n";
        std::cout << "üíª Type 'help' to see available commands\n";
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        cli_app->Run();
        
        std::cout << "üëã Application finished successfully!\n";
        
    } catch (const std::exception& e) {
        std::cerr << "üí• Critical error: " << e.what() << "\n";
        return 1;
    }
    
    return 0;
}